name: Continuous Deployment Workflow

on:
  push:
    branches:
      - main
      - development

jobs:
  deploy-affected:
    strategy:
      matrix:
        runs-on: [ubuntu-latest]
    runs-on: ${{ matrix.runs-on }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Set variables
        id: vars
        run: |
          BRANCH=$(echo "${GITHUB_REF#refs/heads/}")
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "namespace=$(echo $BRANCH | sed 's/main/prd/;s/development/dev/')" >> $GITHUB_OUTPUT
          echo "docker_url=${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}" >> $GITHUB_OUTPUT

      - name: Checkout code into runner
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate Docker for GCP
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Install pnpm ${{ matrix.pnpm-version }}
        uses: pnpm/action-setup@v4
        with:
          version: ${{ matrix.pnpm-version }}

      - name: Install dependencies
        run: pnpm install --workspace-root --frozen-lockfile

      - name: Set affected SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Build Docker images for affected packages
        run: |
          echo "Getting affected packages..."
          packages=$(pnpm exec nx show projects --affected)

          if [ -z $packages ]; then
            echo "No affected packages found. Skipping build."
          else
            for pkg in $packages; do
              CLEAN_NAME=$(echo $pkg | sed 's/@bardsync\///')
              FULL_PATH="${{ steps.vars.outputs.docker_url }}/$CLEAN_NAME/$CLEAN_NAME-${{ steps.vars.outputs.namespace }}"

              echo "Building image for $pkg > $FULL_PATH"
              docker build -t $FULL_PATH:${{ github.sha }} -t $FULL_PATH:latest packages/$CLEAN_NAME
            done
          fi

      - name: Push Docker images for affected packages
        run: |
          echo "Getting affected packages..."
          packages=$(pnpm exec nx show projects --affected)

          if [ -z $packages ]; then
            echo "No affected packages found. Skipping build."
          else
            for pkg in $packages; do
              CLEAN_NAME=$(echo $pkg | sed 's/@bardsync\///')
              FULL_PATH="${{ steps.vars.outputs.docker_url }}/$CLEAN_NAME/$CLEAN_NAME-${{ steps.vars.outputs.namespace }}"

              if ! docker image inspect $FULL_PATH:${{ github.sha }} > /dev/null 2>&1; then
                echo "Image $FULL_PATH:${{ github.sha }} not found locally. Skipping push."
              else
                echo "Pushing image for $pkg > $FULL_PATH"
                docker push --all-tags $FULL_PATH
              fi
            done
          fi
